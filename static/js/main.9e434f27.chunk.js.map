{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/cards-list/cards-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","console","log","className","alt","src","monster","id","name","CardsList","monsters","map","key","SearchBox","placeHolder","handlechange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,2LCE9BC,G,wBAAO,SAACC,GAGjB,OAFAC,QAAQC,IAAIF,GAEH,yBAAKG,UAAU,kBACZ,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAAMM,QAAQC,GAAxC,eACtB,4BAAKP,EAAMM,QAAQE,SCJtBC,EAAY,SAACT,GAAD,OACjB,yBAAKG,UAAU,aAELH,EAAMU,SAASC,KAAI,SAACL,GAChB,OAAO,kBAAC,EAAD,CAAMA,QAASA,EAASM,IAAKN,EAAQC,UCHrDM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BAAOC,KAAK,SAASC,YAAaH,EAClCI,SAAUH,MCqDCI,E,YAnDb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,YAAY,GACZX,SAAU,CACR,CACEF,KAAM,UACND,GAAI,GAEN,CACEC,KAAM,UACND,GAAI,GAEN,CACEC,KAAM,UACND,GAAI,KAfE,E,iFAsBO,IAAD,OAClBe,MAAM,8CAA8CC,MAAK,SAACC,GAExD,OADAvB,QAAQC,IAAIsB,GACLA,EAASC,UAEfF,MAAK,SAAAG,GACJzB,QAAQC,IAAIwB,GACZ,EAAKC,SAAS,CAAEjB,SAAUgB,S,+BAItB,IAAD,OACPzB,QAAQC,IAAI,wBADL,MAE0B0B,KAAKR,MAA9BC,EAFD,EAECA,YACFQ,EAHC,EAEanB,SACcoB,QAAO,SAACxB,GACzC,OAAOA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAExD,OACE,yBAAK5B,UAAU,OAEX,kBAAC,EAAD,CAAWc,YAAY,gBAAgBF,aAAc,SAAAkB,GACnD,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,QAAS,WAC3ClC,QAAQC,IAAI,EAAKkB,aAEvB,kBAAC,EAAD,CAAWV,SAAUmB,S,GA/CXO,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.9e434f27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './card.styles.css'\nexport const Card = (props) => {\n    console.log(props)\n    //return ({props.children}</div>)\n    return ( <div className=\"card-container\">\n                <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}/>\n                <h1>{props.monster.name}</h1>\n            </div>);\n}","import React from 'react';\nimport './cards-list.styles.css'\nimport {Card} from '../card/card.component'\nexport const CardsList = (props) => (        \n        <div className=\"card-list\">\n                {\n                  props.monsters.map((monster) => {\n                      return <Card monster={monster} key={monster.id}></Card>\n                  })               \n                }\n        </div>\n);\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeHolder,handlechange}/* object destructuring for props object */) => (\n    <input type=\"search\" placeholder={placeHolder} \n    onChange={handlechange}/* callback called after setState finish method is called as its async mode setting the values*/        \n       />\n)","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { CardsList } from './components/cards-list/cards-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField:'',\n      monsters: [\n        {\n          name: \"zombie1\",\n          id: 1\n        },\n        {\n          name: \"zombie2\",\n          id: 2\n        },\n        {\n          name: \"zombie3\",\n          id: 3\n        }\n      ]\n    }\n  }\n\n  //life cycle method called as soon as component dom is rendered on page \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then((response) => {\n      console.log(response);\n      return response.json();//gives us json\n    })\n      .then(users => {\n        console.log(users);\n        this.setState({ monsters: users })\n      })\n  }\n\n  render() {\n    console.log(\"render method called\");\n    const { searchField,monsters } = this.state;\n    const filteredMonsters = monsters.filter((monster)=>{\n     return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className=\"App\">\n        \n          <SearchBox placeholder=\"enter monster\" handlechange={e => {   \n            this.setState({searchField:e.target.value}  ,()=>{/* synthetic event*/\n              console.log(this.state);}/* callback called after setState finish method is called as its async mode setting the values*/)            \n          }}></SearchBox>\n        <CardsList monsters={filteredMonsters}></CardsList>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}